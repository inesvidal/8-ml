test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(test); dim(train)
rm(list=ls())
#install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
#install.packages("caret")
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(testing); dim(training)
rm(list=ls())
#install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
#install.packages("caret")
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(testing); dim(training)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(mixtures)
g <- ggplot(data = mixtures, y = CompressiveStrength)
g
g <- qplot(data = mixtures, y = CompressiveStrength)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = Cement)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = BlastFurnaceSlag)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = FlyAsh)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = Water)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = Superplasticizer)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = CoarseAggregate)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = FineAggregate)
g
g <- qplot(data = mixtures, y = CompressiveStrength, color = Age)
g
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(nixtures$SuperPlasticizer)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(mixtures$SuperPlasticizer)
mixtures$SuperPlasticizer
hist(training$SuperPlasticizer)
training$SuperPlasticizer
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
training
summary(training)
training$SuperPlasticizer
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(AlzheimerDisease)
summary(training)
training[grepl("IL", names(training))]
training_sub <- training[grepl("IL", names(training))]
preProc <- preProcess(training_sub,method="pca",pcaComp=2)
preProc
?preproc
?prePrococess
?preProcess
preProc <- preProcess(training_sub,method="pca",thresh = 80)
preProc
preProc <- preProcess(training_sub,method="pca",thresh = .80)
preProc
head(training)
training_sub <- rbind(training$diagnosis, training[grepl("IL", names(training))])
# original model
modelFit1 <- train(training$diagnossis ~ .,method="glm",data=training_sub)
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit,testing))
conf1
# with PDA
preProc <- preProcess(training_sub,method="pca",thresh = .80)
trainPCA <- predict(preProc,training_sub)
modelFit2 <- train(training$diagnossis ~ .,method="glm",data=trainPCA)
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit,testing))
conf2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_sub <- rbind(training$diagnosis, training[grepl("IL", names(training))])
# original model
modelFit1 <- train(training$diagnossis ~ .,method="glm",data=training_sub)
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
conf1
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=training_sub)
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
conf1
preProc <- preProcess(training_sub,method="pca",thresh = .80)
trainPCA <- predict(preProc,training_sub)
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=trainPCA)
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing))
conf2
testing_sub <- rbind(testing$diagnosis, testing[grepl("IL", names(testing))])
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing_sub))
conf1
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=training_sub)
testing_sub <- rbind(testing$diagnosis, testing[grepl("IL", names(testing))])
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing_sub))
conf1
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=training_sub)
modelFit1 <- train(training_sub$diagnosis ~ .,method="glm",data=training_sub)
training_sub$diagnosis
training_sub <- rbind(training$diagnosis, training[grepl("IL", names(training))])
training_sub
dim(training$diagnosis)
dim(training[grepl("IL", names(training))])
dim(training_sub)
training[1,1]
head(training)
head(training$diagnosis)
training_sub <- rbind(training$diagnosis, training[grepl("diagnosis"|"IL", names(training))])
training_sub <- rbind(training$diagnosis, training[grepl("diagnosis|IL", names(training))])
training_sub <- rbind(training$diagnosis, training[grepl("diagnosis | IL", names(training))])
head(training_sub)
training_sub <- training[grepl("diagnosis | IL", names(training))]
head(training_sub)
training_sub$diagnosis <- training$diagnosis
training_sub$diagnosis <- training$diagnosis
head(training_sub)
training_sub <- training[grepl("IL", names(training))]
training_sub$diagnosis <- training$diagnosis
head(training_sub)
training_sub[diagnosis] <- training$diagnosis
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=training_sub)
install.packages('e1071', dependencies=TRUE)
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=training_sub)
testing_sub <- rbind(testing$diagnosis, testing[grepl("IL", names(testing))])
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing_sub))
conf1
preProc <- preProcess(training_sub,method="pca",thresh = .80)
trainPCA <- predict(preProc,training_sub)
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=trainPCA)
testing_sub <- testing[grepl("IL", names(testing))]
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing_sub))
conf2
testing_sub <- testing[grepl("IL", names(testing))]
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing_sub))
conf1
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing_sub))
summary(PCAAnalysis)
preProc <- preProcess(training_sub,method="pca",thresh = .80)
summary(PCAAnalysis)
summary(preProc)
prComp <- prcomp(training_sub)
summary(prComp)
prComp <- prComp(training_sub)
??prcomp
?prcomp
prComp <- prcomp(training_sub)
prComp <- prcomp(training_sub)
preProc
preProc$pcaComp
preProc$dim
preProc$bc
?preProcess
preProc$rotation
preProc <- preProcess(training_sub,method="pca",thresh = .80)
trainPCA <- predict(preProc,training_sub)
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=trainPCA)
testing_sub <- testing[grepl("IL", names(testing))]
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing_sub))
trainPCA
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=trainPCA)
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing_sub))
testing_sub <- testing[grepl("IL", names(testing))]
testing_sub_result <- predict(preProc,testing_sub
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing_sub_result))
testing_sub_result <- predict(preProc,testing_sub)
conf2 <- confusionMatrix(testing$diagnosis,predict(modelFit2,testing_sub_result))
conf2
modelFit1 <- train(training$diagnosis ~ .,method="glm",data=training_sub)
testing_sub <- testing[grepl("IL", names(testing))]
conf1 <- confusionMatrix(testing$diagnosis,predict(modelFit1,testing_sub))
conf1
conf1$positive
conf1$positive
conf1$table
conf1$table
conf1$overall
conf1$overall[1]
testing_sub <- testing[grepl("diagnosis|IL", names(testing))]
testing_sub[1]
testing_sub[1,]
modelFit1 <- train(diagnosis ~ .,method="glm",data=training_sub)
summary(modelFit1$finalModel)
?confusionMatrix
conf1 <- confusionMatrix(data = testing_sub, reference = diagnosis,predict(modelFit1,testing_sub))
conf1 <- confusionMatrix(dreference = diagnosis,predict(modelFit1,testing_sub))
conf1 <- confusionMatrix(reference = diagnosis,predict(modelFit1,testing_sub))
conf1 <- confusionMatrix(diagnosis,predict(modelFit1,testing_sub))
conf1 <- confusionMatrix(testing_sub$diagnosis,predict(modelFit1,testing_sub))
conf1$overall[1]
index <- seq_along(1:nrow(training)
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
index <- seq_along(1:nrow(training))
p <- ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
p
training = mixtures[ inTrain,]
index <- seq_along(1:nrow(training))
p <- ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point()
p
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training_sub <- training[grepl("diagnosis|IL", names(training))]
testing_sub <- testing[grepl("diagnosis|IL", names(training))]
modelFit1 <- train(diagnosis ~ .,method="glm",data=training_sub)
summary(modelFit1$finalModel)
predict1 <- predict(modelFit1,newdata = testing_sub)
conf1 <- confusionMatrix(predict1, testing_sub$diagnosis)
conf1$overall[1]
dim(training)
dim(training_sub)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData_sub <- adData[grepl("diagnosis|IL", names(adData))]
dim(adData)
dim(adData_sub)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData_sub <- adData[grepl("diagnosis|IL", names(adData))]
dim(adData)
dim(adData_sub)
inTrain = createDataPartition(adData_sub$diagnosis, p = 3/4)[[1]]
training = adData_sub[ inTrain,]
testing = adData_sub[-inTrain,]
# original model
#install.packages('e1071', dependencies=TRUE)
modelFit1 <- train(diagnosis ~ .,method="glm",data=training_sub)
summary(modelFit1$finalModel)
predict1 <- predict(modelFit1,newdata = testing_sub)
conf1 <- confusionMatrix(predict1, testing_sub$diagnosis)
conf1$overall[1]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training2 = df[inTrain, ]
testing2 = df[-inTrain, ]
identical(training, training2)
dim(training)
dim(training2)
head(training)
head(training2)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
adData_sub <- adData[grepl("diagnosis|^IL", names(adData))]
dim(adData)
dim(adData_sub)
inTrain = createDataPartition(adData_sub$diagnosis, p = 3/4)[[1]]
training = adData_sub[ inTrain,]
testing = adData_sub[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training2 = df[inTrain, ]
testing2 = df[-inTrain, ]
identical(training, training2)
modelFit1 <- train(diagnosis ~ .,method="glm",data=training)
summary(modelFit1$finalModel)
predict1 <- predict(modelFit1,newdata = testing)
conf1 <- confusionMatrix(predict1, testing$diagnosis)
conf1$overall[1]
prComp <- prcomp(training)
summary(prComp)
preProc <- preProcess(training,method="pca",thresh = .80)
trainPCA <- predict(preProc,training)
modelFit2 <- train(training$diagnosis ~ .,method="glm",data=trainPCA)
testPCA <- predict(preProc,testing)
predict2 <- predict(modelFit2,test_pca)
conf2 <- confusionMatrix(testing$diagnosis,predict2)
conf2$overall[1]
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(testing); dim(training)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(testing); dim(training)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(testing); dim(training)
dim(test); dim(train)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
summary(training)
training_sub <- training[grepl("IL", names(training))]
preProc <- preProcess(training_sub,method="pca",thresh = .90)
preProc
swirl()
library(swirl)
swirl()
3.5
summary(expect_dice)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh+edl)
integrate(t^2/2, 0,2)
integrate(x^2/2, 0,2)
?integrate
integrate(myfunc, 0,2)
myfunc
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
swirl
swirl()
choose(5,3)*0.8^3*0.2^2
choose(5,3)*0.8^3*0.2^2+choose(5,4)*0.8^4*0.2^1+choose(5,5)*0.8^5*0.2^0
pbinom(quantile=2, size = 5, prob =0.8)
pbinom(2, size = 5, prob=0.8)
pbinom(2, size = 5, prob=0.8, lower.tail = FALSE)
qnorm(.9)
qnorm(.1)
0
3+2*qnorm(.975)
qnorm(.975,mean=3,sd=2)
3+2*qnorm(.975)
1.96*2 + 3
pnorm(1200, mu = 1020, sd=50, lower.tail = F)
pnorm(1200, mean = 1020, sd=50, lower.tail = F)
pnorm(1200, mean = 1020, sd=50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(.75, mean = 1020, sd = 50)
.53
.53
ppois(3, mean = 2.5*4)
ppois(3, lambda = 2.5*4)
pbinom(5, n=100, p=.01)
?pbinom
pbinom(5, size=100, p=.01)
pbinom(5, size=1000, p=.01)
ppois(5, lambda =1000*0.01)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5^2
sum(dice_sqr*dice_high) -3.5^2
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqet(10)
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(4)
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
quit
quit()
setwd("~/Coursera/8-ml/quizz")
install.packages("AppliedPredictiveModeling")
install.packages("pgmm")
install.packages("ElemStatLearn")
installed.packages()
install.packages("rpart")
installed.packages()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
segmentationOriginal
summary(segmentationOriginal)
?segmentationOriginal
?segmentationOriginal$Case
segmentationOriginal$Case
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#1. Subset the data to a training set and testing set based on the Case variable in the data set.
training <- segmentationOriginal[segmentationOriginal$Case = Train,]
testing <- segmentationOriginal[segmentationOriginal$Case = Test,]
dim(training); dim(testing)
dim(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case = Train]
training <- segmentationOriginal[, segmentationOriginal$Case = Train]
dim(training)
dim(segmentationOriginal); summary(segmentationOriginalnal$Case)
dim(segmentationOriginal); summary(segmentationOriginal$Case)
training <- segmentationOriginal[segmentationOriginal$Case == Train]
training <- segmentationOriginal[segmentationOriginal$Case = "Train"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train"]
training <- segmentationOriginal[segmentationOriginal$Case == Train]
training <- segmentationOriginal[segmentationOriginal$Case == "Train"]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
#1. Subset the data to a training set and testing set based on the Case variable in the data set.
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
testing <- segmentationOriginal[segmentationOriginal$Case == "Test",]
dim(segmentationOriginal); summary(segmentationOriginal$Case)
dim(training); dim(testing)
set.seet(125)
fit <- train(Class ~ ., method ="rpart", data = training)
set.seed(125)
fit <- train(Class ~ ., method ="rpart", data = training)
fit$finalModel
install.packages("rattle")
fancyRpartPlot(fit$finalModel)
library(rattle)
fancyRpartPlot(fit$finalModel)
fancyRpartPlot(fit$finalModel)
?fancyrpartplot
??fancyrpartplot
library(pgmm)
data(olive)
olive = olive[,-1]
fit <- train(Class ~ ., method ="rpart", data = training)
setwd("~/Coursera/8-ml/quizz")
rm(list=ls())
quit
quit()
